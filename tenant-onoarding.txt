#!/bin/bash
TENANT_ID="tenant0011" 
THING_NAME="${TENANT_ID}-device1"
POLICY_FILE="./files/iot_policy.json"
IOT_POLICY_NAME="${THING_NAME}-policy"
AWS_PRIMARY_REGION="us-east-1"
AWS_PROFILE="default"
AWS_ACCOUNT_ID="247590354562"
KINESIS_STREAM="${TENANT_ID}-KS"
DDB_TABLE="${TENANT_ID}-DDBT"
S3_DATALAKE_BUCKET="${TENANT_ID}bucket"
SNS_TOPIC_NAME="${TENANT_ID}topic"

# create the policy (first time)
aws iot create-policy \
  --policy-name "$IOT_POLICY_NAME" \
  --policy-document file://"$POLICY_FILE" \
  --region "$AWS_PRIMARY_REGION" --profile "$AWS_PROFILE"

aws iot create-thing --thing-name "$THING_NAME"   --region "$AWS_PRIMARY_REGION" --profile "$AWS_PROFILE"

aws iot create-keys-and-certificate --set-as-active \
  --certificate-pem-outfile "cert-${THING_NAME}.pem" \
  --public-key-outfile "public-${THING_NAME}.key" \
  --private-key-outfile "private-${THING_NAME}.key" \
  --region "$AWS_PRIMARY_REGION" \
  --profile "$AWS_PROFILE" \
  --output json \
  --query '{certificateArn:certificateArn,certificateId:certificateId}' \
   | tee cert-output.json

export CERT_ARN=$(jq -r '.certificateArn' cert-output.json)
export CERT_ID=$(jq -r '.certificateId' cert-output.json)

# lock down file perms
chmod 600 "private-${THING_NAME}.key"
chmod 644 "cert-${THING_NAME}.pem" "public-${THING_NAME}.key"


# attach the policy to your certificate
aws iot attach-policy \
  --policy-name "$IOT_POLICY_NAME" \
  --target "$CERT_ARN" \
  --region "$AWS_PRIMARY_REGION" --profile "$AWS_PROFILE"

aws iot attach-thing-principal --thing-name "$THING_NAME" --principal "$CERT_ARN" \
  --region "$AWS_PRIMARY_REGION" --profile "$AWS_PROFILE"

curl -fsSL -o AmazonRootCA1.pem https://www.amazontrust.com/repository/AmazonRootCA1.pem

# Tenant data plane
aws kinesis create-stream --stream-name "$KINESIS_STREAM" --shard-count 1 \
  --region "$AWS_PRIMARY_REGION" --profile "$AWS_PROFILE" || true

aws dynamodb create-table --table-name "$DDB_TABLE" \
  --attribute-definitions AttributeName=pk,AttributeType=S AttributeName=sk,AttributeType=S \
  --key-schema AttributeName=pk,KeyType=HASH AttributeName=sk,KeyType=RANGE \
  --billing-mode PAY_PER_REQUEST --region "$AWS_PRIMARY_REGION" --profile "$AWS_PROFILE" || true

aws s3api create-bucket --bucket "$S3_DATALAKE_BUCKET" \
  --create-bucket-configuration LocationConstraint="$AWS_PRIMARY_REGION" \
  --region "$AWS_PRIMARY_REGION" --profile "$AWS_PROFILE" || true

aws sns create-topic --name "$SNS_TOPIC_NAME" --region "$AWS_PRIMARY_REGION" --profile "$AWS_PROFILE"

# IoT Rule â†’ Kinesis (+optional Lambda for scoring)
ROLE_ARN_FOR_RULE="arn:aws:iam::${AWS_ACCOUNT_ID}:role/iot-rule-actions-role"
LAMBDA_ARN="<arn:aws:lambda:${AWS_PRIMARY_REGION}:${AWS_ACCOUNT_ID}:function:score-telemetry-${TENANT_ID}>"

aws iot create-topic-rule --rule-name "telemetry_to_kinesis_${TENANT_ID}" \
  --topic-rule-payload "$(cat <<JSON
{
  "sql": "SELECT topic() as topic, timestamp() as ts, * FROM 'tenants/${TENANT_ID}/devices/+/telemetry'",
  "actions": [
    {"kinesis": {"roleArn": "${ROLE_ARN_FOR_RULE}", "streamName": "${KINESIS_STREAM}", "partitionKey": "${TENANT_ID}"}}\
    $( [[ -n "$LAMBDA_ARN" ]] && printf ',{"lambda":{"functionArn":"%s"}}' "$LAMBDA_ARN" )
  ],
  "ruleDisabled": false
}
JSON
)" \
  --region "$AWS_PRIMARY_REGION" ${AWS_PROFILE:+--profile "$AWS_PROFILE"}
