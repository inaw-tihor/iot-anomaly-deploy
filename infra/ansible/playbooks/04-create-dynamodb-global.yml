---
- name: Create DynamoDB global table (native modules + minimal cost)
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    aws_profile: default
    aws_primary_region: ap-south-1
    aws_dr_region: ap-southeast-1
    dynamodb_table: your-ddb-table

    # Minimal-cost knobs
    table_class: STANDARD          # use STANDARD for most workloads; STANDARD_IA if storage >> R/W
    enable_ttl: false              # flip to true to enable TTL
    ttl_attribute_name: expire_at  # epoch seconds; add on items you want to auto-delete

    common_tags:
      Project: GENAI4SAAS
      Env: dev

  tasks:
    - name: Ensure primary table exists (PAY_PER_REQUEST, minimal ops cost)
      community.aws.dynamodb_table:
        name: "{{ dynamodb_table }}"
        region: "{{ aws_primary_region }}"
        profile: "{{ aws_profile }}"
        billing_mode: PAY_PER_REQUEST
        hash_key_name: pk
        hash_key_type: STRING
        range_key_name: sk
        range_key_type: STRING
        table_class: "{{ table_class }}"
        wait: true
        tags: "{{ common_tags }}"

    - name: (Optional) Enable TTL to reduce storage costs
      when: enable_ttl
      community.aws.dynamodb_ttl:
        state: enable
        table_name: "{{ dynamodb_table }}"
        attribute_name: "{{ ttl_attribute_name }}"
        region: "{{ aws_primary_region }}"
        profile: "{{ aws_profile }}"

    - name: Describe table in primary to see if DR replica already exists
      community.aws.dynamodb_table_info:
        name: "{{ dynamodb_table }}"
        region: "{{ aws_primary_region }}"
        profile: "{{ aws_profile }}"
      register: primary_info

    - name: Figure out if DR replica is present
      set_fact:
        has_dr_replica: >-
          {{
            (primary_info.table.replicas | default([]))
            | selectattr('region_name', 'defined')
            | selectattr('region_name', 'equalto', aws_dr_region)
            | list | length > 0
          }}

    # Global Tables v2019: add a replica by calling UpdateTable with ReplicaUpdates.
    # (No Ansible module exposes this yet; we keep it idempotent by checking first.)
    - name: Add DR replica (only if missing)
      ansible.builtin.command: >
        aws dynamodb update-table
        --table-name {{ dynamodb_table }}
        --region {{ aws_primary_region }}
        --profile {{ aws_profile }}
        --replica-updates '[{"Create":{"RegionName":"{{ aws_dr_region }}"}}]'
      when: not has_dr_replica
      register: add_replica
      changed_when: not has_dr_replica

    - name: Wait until replica is ACTIVE in DR region
      until: dr_info.table is defined and dr_info.table.table_status == 'ACTIVE'
      retries: 60
      delay: 10
      community.aws.dynamodb_table_info:
        name: "{{ dynamodb_table }}"
        region: "{{ aws_dr_region }}"
        profile: "{{ aws_profile }}"
      register: dr_info
